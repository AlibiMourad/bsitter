/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.khaled.clientbsitter.view;

import com.khaled.clientbsitter.controlle.NewMain;
import com.khaled.clientbsitter.controlle.SitterControlle;
import com.khaled.clientbsitter.model.Sitter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author moura
 */
public class BabySitterList extends javax.swing.JFrame {

    public List<Sitter> listSitters;

    /**
     * Creates new form BabySitterList
     */
    public BabySitterList() {
        initComponents();
        updateJtable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("ACTIVE/DESACTIVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("List_BabySitter");

        jButton1.setText("Quiter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(247, 247, 247))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(101, 101, 101))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        System.out.println("" + jTable1.getSelectedRow());
        System.out.println("" + this.listSitters.get(jTable1.getSelectedRow()));
        Sitter sitter = new Sitter();
        sitter = this.listSitters.get(jTable1.getSelectedRow());
        sitter.getUsers().getAuth().setActive((sitter.getUsers().getAuth().getActive() == 0) ? 1 : 0);
        System.out.println("|||" + sitter.getUsers().getAuth().getActive());
        SitterControlle sitterControlle = new SitterControlle();
        try {
            sitterControlle.updateSitter(sitter);
            updateJtable();
        } catch (Exception ex) {
            Logger.getLogger(BabySitterList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AdminInterface adminInterface = new AdminInterface();
        adminInterface.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Sitter sitter = new Sitter();
        sitter = this.listSitters.get(jTable1.getSelectedRow());
        SitterControlle sitterControlle = new SitterControlle();
        try {
            sitterControlle.deleteSitter(sitter.getId());
            updateJtable();
        } catch (Exception ex) {
            Logger.getLogger(BabySitterList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Sitter sitter = new Sitter();
        sitter = this.listSitters.get(jTable1.getSelectedRow());
        UpdateSitter updateSitter = new UpdateSitter(sitter);
        updateSitter.setSitter(sitter);
        updateSitter.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BabySitterList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BabySitterList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BabySitterList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BabySitterList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BabySitterList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void updateJtable() {
        SitterControlle sitterControlle = new SitterControlle();
        try {
            this.listSitters = sitterControlle.getAllSitters();
            System.out.println("&&&&&&&&" + listSitters.size());

            //////////////////////
            DefaultTableModel dtm = new DefaultTableModel(0, 0);
            String header[] = new String[]{
                "STATUS",
                "ID",
                "User Name",
                "First Name",
                "Last Name",
                "Date Naissance",
                "Genre",
                "Email",
                "Telephones",
                "Adress: Paye/ville/code Postal"
            };
            dtm.setColumnIdentifiers(header);
            jTable1.setModel(dtm);
            // add row dynamically into the table 
            String pattern = "dd/MM/yyyy";
            String delim = "-";
            DateFormat df = new SimpleDateFormat(pattern);

            for (int count = 0; count < listSitters.size(); count++) {
//                if(listSitters.get(count).getUsers().getDateNaissance()!=null){
//                System.out.println((listSitters.get(count).getUsers().getDateNaissance()!=null) ?
//                        ""+df.format(listSitters.get(count).getUsers().getDateNaissance()) : "null");
//                String telephones = String.join(delim, listSitters.get(count).getUsers().getTelephones());
//                System.out.println("" + telephones);
                dtm.addRow(new Object[]{
                    (listSitters.get(count).getUsers().getAuth().getActive() == 1) ? "ACTIVE" : "DESACTIVE",
                    listSitters.get(count).getId().toString(),
                    listSitters.get(count).getUsers().getAuth().getUserName().toString(),
                    listSitters.get(count).getUsers().getFirstName().toString(),
                    listSitters.get(count).getUsers().getLastName().toString(),
                    (listSitters.get(count).getUsers().getDateNaissance() != null)
                    ? "" + df.format(listSitters.get(count).getUsers().getDateNaissance()) : "null",
                    listSitters.get(count).getUsers().getGenre().toString(),
                    listSitters.get(count).getUsers().getEmail().toString(),
                    String.join(delim, listSitters.get(count).getUsers().getTelephones()),
                    "" + listSitters.get(count).getUsers().getAdress().getPays() + "/"
                    + listSitters.get(count).getUsers().getAdress().getVille() + "/"
                    + listSitters.get(count).getUsers().getAdress().getPostal()
                });
            }
            ///////////////////

//            for (int i = 0; i < listSitters.size(); i++) {
//                System.out.println("éééé" + listSitters.get(i).toString());
//                model.add(i, listSitters.get(i).getId().toString());
//
//            }
        } catch (Exception ex) {
            Logger.getLogger(NewMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
